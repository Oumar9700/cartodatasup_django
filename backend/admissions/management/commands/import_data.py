import csv
import os
from django.core.management.base import BaseCommand
from admissions.models import Institution, Formation, Candidature

class Command(BaseCommand):
    help = "Importe les donn√©es des √©tablissements, formations et candidatures depuis un fichier CSV"

    def handle(self, *args, **kwargs):
        file_path = os.path.join("data", "fr-esr-parcoursup_2023.csv")  # üìå Modifier si besoin

        # V√©rification de l'existence du fichier CSV
        if not os.path.exists(file_path):
            self.stderr.write(self.style.ERROR(f"‚ùå Le fichier {file_path} est introuvable."))
            return

        with open(file_path, newline='', encoding='utf-8-sig') as csvfile:
            reader = csv.DictReader(csvfile, delimiter=';')  # ‚ö†Ô∏è Utilisation de ';' comme s√©parateur

            for row in reader:
                try:
                    # üîπ Cr√©ation ou mise √† jour de l'√©tablissement
                    institution, _ = Institution.objects.get_or_create(
                        uai_code=row["Code UAI de l'√©tablissement"],
                        defaults={
                            "name": row["√âtablissement"],
                            "department_code": row["Code d√©partemental de l‚Äô√©tablissement"],
                            "department_name": row["D√©partement de l‚Äô√©tablissement"],
                            "region": row["R√©gion de l‚Äô√©tablissement"],
                            "academy": row["Acad√©mie de l‚Äô√©tablissement"],
                            "commune": row["Commune de l‚Äô√©tablissement"],
                            "is_public": row["Statut de l‚Äô√©tablissement de la fili√®re de formation (public, priv√©‚Ä¶)"] == "Public"
                        }
                    )

                    # üîπ Cr√©ation ou mise √† jour de la formation
                    formation, _ = Formation.objects.get_or_create(
                        institution=institution,
                        name=row["Fili√®re de formation"],
                        category=row["Fili√®re de formation tr√®s agr√©g√©e"],
                        detailed_category=row["Fili√®re de formation d√©taill√©e"],
                        is_selective=row["S√©lectivit√©"] == "formation s√©lective",
                        gps_coordinates=row["Coordonn√©es GPS de la formation"],
                        capacity=int(row["Capacit√© de l‚Äô√©tablissement par formation"] or 0)
                    )

                    # üîπ Cr√©ation de la candidature
                    Candidature.objects.create(
                        formation=formation,
                        session_year=int(row["Session"]),

                        total_candidates=int(row["Effectif total des candidats pour une formation"] or 0),
                        female_candidates=int(row["Dont effectif des candidates pour une formation"] or 0),
                        boursier_candidates=int(row["Dont effectif des candidats boursiers n√©o bacheliers g√©n√©raux en phase principale"] or 0) +
                                           int(row["Dont effectif des candidats boursiers n√©o bacheliers technologiques en phase principale"] or 0) +
                                           int(row["Dont effectif des candidats boursiers n√©o bacheliers professionnels en phase principale"] or 0),

                        neo_bac_general=int(row["Effectif des candidats n√©o bacheliers g√©n√©raux en phase principale"] or 0),
                        neo_bac_techno=int(row["Effectif des candidats n√©o bacheliers technologiques en phase principale"] or 0),
                        neo_bac_pro=int(row["Effectif des candidats n√©o bacheliers professionnels en phase principale"] or 0),

                        admitted_total=int(row["Effectif total des candidats ayant accept√© la proposition de l‚Äô√©tablissement (admis)"] or 0),
                        admitted_females=int(row["Dont effectif des candidates admises"] or 0),
                        admitted_boursiers=int(row["Dont effectif des admis boursiers n√©o bacheliers"] or 0),

                        admitted_neo_bac_general=int(row["Effectif des admis n√©o bacheliers g√©n√©raux"] or 0),
                        admitted_neo_bac_techno=int(row["Effectif des admis n√©o bacheliers technologiques"] or 0),
                        admitted_neo_bac_pro=int(row["Effectif des admis n√©o bacheliers professionnels"] or 0),

                        mention_tb=int(row["Dont effectif des admis n√©o bacheliers avec mention Tr√®s Bien au bac"] or 0),
                        mention_b=int(row["Dont effectif des admis n√©o bacheliers avec mention Bien au bac"] or 0),
                        mention_ab=int(row["Dont effectif des admis n√©o bacheliers avec mention Assez Bien au bac"] or 0),
                        mention_none=int(row["Dont effectif des admis n√©o bacheliers sans mention au bac"] or 0),

                        same_academy_admissions=int(row["Dont effectif des admis issus de la m√™me acad√©mie"] or 0),
                        different_academy_admissions=int(row["Effectif total des candidats ayant accept√© la proposition de l‚Äô√©tablissement (admis)"] or 0) -
                                                      int(row["Dont effectif des admis issus de la m√™me acad√©mie"] or 0),

                        admitted_before_bac=int ( float (row["Dont effectif des admis ayant re√ßu leur proposition d‚Äôadmission avant le baccalaur√©at"]) or 0),
                        admitted_after_procedure_start=int ( float (row["Dont effectif des admis ayant re√ßu leur proposition d‚Äôadmission √† l'ouverture de la proc√©dure principale"]) or 0),
                        admitted_after_procedure_end=int ( float (row["Dont effectif des admis ayant re√ßu leur proposition d‚Äôadmission avant la fin de la proc√©dure principale"]) or 0),
                    )

                    self.stdout.write(self.style.SUCCESS(f"‚úÖ Import√© : {formation.name} ({row['Session']})"))

                except Exception as e:
                    self.stderr.write(self.style.ERROR(f"‚ùå Erreur avec {row['√âtablissement']} - {str(e)}"))

        self.stdout.write(self.style.SUCCESS("üéâ Importation termin√©e !"))
